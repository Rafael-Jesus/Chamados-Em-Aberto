{"ast":null,"code":"//. # React Collect\n//.\n//. [![Build Status](https://travis-ci.com/wearereasonablepeople/react-collect.svg?branch=master)](https://travis-ci.com/wearereasonablepeople/react-collect)\n//. [![Greenkeeper Enabled](https://badges.greenkeeper.io/wearereasonablepeople/react-collect.svg)](https://greenkeeper.io/)\n//.\n//. Allows the top of your render-tree to collect information from elements\n//. in the sub-tree. Whenever the tree rerenders, the collection of information\n//. is adjusted to contain only the information from the rendered elements.\n//.\n//. This allows to dynamically include only the Redux reducers that are\n//. relevant to the current view, for example, which can have benefits for\n//. performance or bundle size. It also encourages a more \"componentised\"\n//. architecture.\n//.\n//. ## Usage\n//.\n//. ```js\n//. import {collect, Collector} from 'react-collect';\n//. import {render} from 'react-dom';\n//. import {createStore} from 'redux';\n//. import reduceReducers from 'reduce-reducers';\n//.\n//. const myReducer = (state, {type}) => ({...state, lastAction: type});\n//. const store = createStore (x => x);\n//.\n//. // We pass the reducer into collect. Whenever this component is mounted,\n//. // the reducer will be made available to the Collector.\n//. const MyComponent = collect (myReducer) (() => (\n//.   <button onClick={() => store.dispatch ({type: 'MY_ACTION'})}></button>\n//. ));\n//.\n//. // Whenever the set of reducers changes, we swap out the active reducer.\n//. const onChange = rs => store.replaceReducer (reduceReducers (rs));\n//.\n//. render (\n//.   <Collector onChange={onChange}><MyComponent /></Collector>,\n//.   document.getElementById ('app')\n//. );\n//. ```\nimport React from 'react';\nvar Component = React.Component;\nvar createElement = React.createElement;\nvar Context = React.createContext(); // identity :: a -> a\n\nexport function identity(x) {\n  return x;\n} // getComponentName :: ReactComponent? -> String\n\nexport function getComponentName(Component) {\n  return Component == null ? '<Null>' : Component.displayName || Component.name || '<Anonymous>';\n}\nexport function createBaseCollectionManager(item) {\n  function BaseComponent(props) {\n    Component.call(this, props);\n    props.collect(item);\n  }\n\n  BaseComponent.prototype = Object.create(Component.prototype);\n\n  BaseComponent.prototype.componentWillUnmount = function () {\n    this.props.uncollect(item);\n  };\n\n  return BaseComponent;\n} //. ## API\n//.\n//# collect :: Any? -> ReactComponent -> ReactComponent\n//.\n//. Decorates a component with collection capabilities. Decorated components\n//. must have a [`Collector`](#Collector) as one of their ancestors.\n//.\n//. When given, the first argument is an item that is always automatically\n//. collected whenever the component mounts, and uncollected when the component\n//. unmounts.\n//.\n//. Alternatively, for more control, you can manually use the `collect` and\n//. `uncollect` functions that are given to the decorated component as props.\n//.\n//. ```js\n//. import {collect} from 'react-collect';\n//. import {MyComponent} from './my-component';\n//.\n//. export default collect ({message: 'Hello!'}) (MyComponent);\n//. ```\n\nexport function collect(item) {\n  var BaseComponent = item == null ? Component : createBaseCollectionManager(item);\n  return function (UserComponent) {\n    var name = getComponentName(UserComponent);\n\n    function CollectorManager(props) {\n      BaseComponent.call(this, props);\n    }\n\n    CollectorManager.prototype = Object.create(BaseComponent.prototype);\n\n    CollectorManager.prototype.render = function () {\n      return UserComponent && createElement(UserComponent, this.props);\n    };\n\n    CollectorManager.displayName = 'CollectorManager(' + name + ')';\n\n    function Collecting(xs) {\n      return createElement(Context.Consumer, {}, function (ys) {\n        return createElement(CollectorManager, Object.assign({}, xs, ys));\n      });\n    }\n\n    Collecting.displayName = 'Collecting(' + name + ')';\n    return Collecting;\n  };\n} //# Collector :: ReactComponent\n//.\n//. This component wraps your tree and collects the items from all child\n//. components that have been decorated with [`collect`](#collect).\n//.\n//. Expects a single property `onChange` - the function to call when the\n//. collection has changed. The function is called with an array of distinct\n//. entries.\n//.\n//. ```jsx\n//. import {Collector} from 'react-collect';\n//. import App from './my-app';\n//.\n//. const onChange = collection => collection.forEach (() => { /* */ });\n//.\n//. export default <Collector onChange={onChange}><App /></Collector>;\n//. ```\n\nexport function Collector(props) {\n  if (typeof props.onChange !== 'function') {\n    throw new TypeError('Collector wants an onChange prop of type function');\n  }\n\n  Component.call(this, props);\n  this.toCollect = new Set();\n  this.toUncollect = new Set();\n  this.collection = new Set();\n}\nCollector.prototype = Object.create(Component.prototype);\n\nCollector.prototype.updateCollection = function () {\n  var toCollect = Array.from(this.toCollect).filter(function (item) {\n    return !(this.toUncollect.has(item) || this.collection.has(item));\n  }, this);\n  var toUncollect = Array.from(this.toUncollect).filter(function (item) {\n    return !this.toCollect.has(item) && this.collection.has(item);\n  }, this);\n  this.toCollect = new Set();\n  this.toUncollect = new Set();\n\n  if (toCollect.length === 0 && toUncollect.length === 0) {\n    return;\n  }\n\n  toUncollect.forEach(this.collection.delete, this.collection);\n  toCollect.forEach(this.collection.add, this.collection);\n  this.props.onChange(Array.from(this.collection));\n};\n\nCollector.prototype.setDirty = function () {\n  clearTimeout(this.timeoutId);\n  this.timeoutId = setTimeout(function (collector) {\n    collector.updateCollection();\n  }, 20, this);\n};\n\nCollector.prototype.collect = function (item) {\n  this.toCollect.add(item);\n  this.setDirty();\n};\n\nCollector.prototype.uncollect = function (item) {\n  this.toUncollect.add(item);\n  this.setDirty();\n};\n\nCollector.prototype.componentWillUnmount = function () {\n  clearTimeout(this.timeoutId);\n\n  if (this.collection.size > 0) {\n    this.props.onChange([]);\n  }\n};\n\nCollector.prototype.render = function () {\n  return createElement(Context.Provider, {\n    value: {\n      collect: this.collect.bind(this),\n      uncollect: this.uncollect.bind(this)\n    }\n  }, this.props.children);\n};","map":{"version":3,"names":["React","Component","createElement","Context","createContext","identity","x","getComponentName","displayName","name","createBaseCollectionManager","item","BaseComponent","props","call","collect","prototype","Object","create","componentWillUnmount","uncollect","UserComponent","CollectorManager","render","Collecting","xs","Consumer","ys","assign","Collector","onChange","TypeError","toCollect","Set","toUncollect","collection","updateCollection","Array","from","filter","has","length","forEach","delete","add","setDirty","clearTimeout","timeoutId","setTimeout","collector","size","Provider","value","bind","children"],"sources":["/home/gl/Área de Trabalho/Projetos/4.ProjetoChamados/chamados/node_modules/react-collect/index.mjs"],"sourcesContent":["//. # React Collect\n//.\n//. [![Build Status](https://travis-ci.com/wearereasonablepeople/react-collect.svg?branch=master)](https://travis-ci.com/wearereasonablepeople/react-collect)\n//. [![Greenkeeper Enabled](https://badges.greenkeeper.io/wearereasonablepeople/react-collect.svg)](https://greenkeeper.io/)\n//.\n//. Allows the top of your render-tree to collect information from elements\n//. in the sub-tree. Whenever the tree rerenders, the collection of information\n//. is adjusted to contain only the information from the rendered elements.\n//.\n//. This allows to dynamically include only the Redux reducers that are\n//. relevant to the current view, for example, which can have benefits for\n//. performance or bundle size. It also encourages a more \"componentised\"\n//. architecture.\n//.\n//. ## Usage\n//.\n//. ```js\n//. import {collect, Collector} from 'react-collect';\n//. import {render} from 'react-dom';\n//. import {createStore} from 'redux';\n//. import reduceReducers from 'reduce-reducers';\n//.\n//. const myReducer = (state, {type}) => ({...state, lastAction: type});\n//. const store = createStore (x => x);\n//.\n//. // We pass the reducer into collect. Whenever this component is mounted,\n//. // the reducer will be made available to the Collector.\n//. const MyComponent = collect (myReducer) (() => (\n//.   <button onClick={() => store.dispatch ({type: 'MY_ACTION'})}></button>\n//. ));\n//.\n//. // Whenever the set of reducers changes, we swap out the active reducer.\n//. const onChange = rs => store.replaceReducer (reduceReducers (rs));\n//.\n//. render (\n//.   <Collector onChange={onChange}><MyComponent /></Collector>,\n//.   document.getElementById ('app')\n//. );\n//. ```\n\nimport React from 'react';\n\nvar Component = React.Component;\nvar createElement = React.createElement;\nvar Context = React.createContext ();\n\n// identity :: a -> a\nexport function identity(x) {\n  return x;\n}\n\n// getComponentName :: ReactComponent? -> String\nexport function getComponentName(Component) {\n  return Component == null ?\n         '<Null>' :\n         (Component.displayName || Component.name || '<Anonymous>');\n}\n\nexport function createBaseCollectionManager(item) {\n\n  function BaseComponent(props) {\n    Component.call (this, props);\n    props.collect (item);\n  }\n\n  BaseComponent.prototype = Object.create (Component.prototype);\n\n  BaseComponent.prototype.componentWillUnmount = function() {\n    this.props.uncollect (item);\n  };\n\n  return BaseComponent;\n\n}\n\n//. ## API\n//.\n//# collect :: Any? -> ReactComponent -> ReactComponent\n//.\n//. Decorates a component with collection capabilities. Decorated components\n//. must have a [`Collector`](#Collector) as one of their ancestors.\n//.\n//. When given, the first argument is an item that is always automatically\n//. collected whenever the component mounts, and uncollected when the component\n//. unmounts.\n//.\n//. Alternatively, for more control, you can manually use the `collect` and\n//. `uncollect` functions that are given to the decorated component as props.\n//.\n//. ```js\n//. import {collect} from 'react-collect';\n//. import {MyComponent} from './my-component';\n//.\n//. export default collect ({message: 'Hello!'}) (MyComponent);\n//. ```\nexport function collect(item) {\n\n  var BaseComponent = (item == null) ?\n                      (Component) :\n                      (createBaseCollectionManager (item));\n\n  return function(UserComponent) {\n\n    var name = getComponentName (UserComponent);\n\n    function CollectorManager(props) {\n      BaseComponent.call (this, props);\n    }\n\n    CollectorManager.prototype = Object.create (BaseComponent.prototype);\n\n    CollectorManager.prototype.render = function() {\n      return UserComponent && createElement (UserComponent, this.props);\n    };\n\n    CollectorManager.displayName = 'CollectorManager(' + name + ')';\n\n    function Collecting(xs) {\n      return createElement (Context.Consumer, {}, function(ys) {\n        return createElement (CollectorManager, Object.assign ({}, xs, ys));\n      });\n    }\n\n    Collecting.displayName = 'Collecting(' + name + ')';\n\n    return Collecting;\n\n  };\n}\n\n//# Collector :: ReactComponent\n//.\n//. This component wraps your tree and collects the items from all child\n//. components that have been decorated with [`collect`](#collect).\n//.\n//. Expects a single property `onChange` - the function to call when the\n//. collection has changed. The function is called with an array of distinct\n//. entries.\n//.\n//. ```jsx\n//. import {Collector} from 'react-collect';\n//. import App from './my-app';\n//.\n//. const onChange = collection => collection.forEach (() => { /* */ });\n//.\n//. export default <Collector onChange={onChange}><App /></Collector>;\n//. ```\nexport function Collector(props) {\n  if (typeof props.onChange !== 'function') {\n    throw new TypeError ('Collector wants an onChange prop of type function');\n  }\n  Component.call (this, props);\n  this.toCollect = new Set ();\n  this.toUncollect = new Set ();\n  this.collection = new Set ();\n}\n\nCollector.prototype = Object.create (Component.prototype);\n\nCollector.prototype.updateCollection = function() {\n  var toCollect = Array.from (this.toCollect).filter (function(item) {\n    return !(this.toUncollect.has (item) || this.collection.has (item));\n  }, this);\n  var toUncollect = Array.from (this.toUncollect).filter (function(item) {\n    return !this.toCollect.has (item) && this.collection.has (item);\n  }, this);\n  this.toCollect = new Set ();\n  this.toUncollect = new Set ();\n  if (toCollect.length === 0 && toUncollect.length === 0) {\n    return;\n  }\n  toUncollect.forEach (this.collection.delete, this.collection);\n  toCollect.forEach (this.collection.add, this.collection);\n  this.props.onChange (Array.from (this.collection));\n};\n\nCollector.prototype.setDirty = function() {\n  clearTimeout (this.timeoutId);\n  this.timeoutId = setTimeout (function(collector) {\n    collector.updateCollection ();\n  }, 20, this);\n};\n\nCollector.prototype.collect = function(item) {\n  this.toCollect.add (item);\n  this.setDirty ();\n};\n\nCollector.prototype.uncollect = function(item) {\n  this.toUncollect.add (item);\n  this.setDirty ();\n};\n\nCollector.prototype.componentWillUnmount = function() {\n  clearTimeout (this.timeoutId);\n  if (this.collection.size > 0) {\n    this.props.onChange ([]);\n  }\n};\n\nCollector.prototype.render = function() {\n  return createElement (\n    Context.Provider,\n    {value: {\n      collect: this.collect.bind (this),\n      uncollect: this.uncollect.bind (this)\n    }},\n    this.props.children\n  );\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAIC,SAAS,GAAGD,KAAK,CAACC,SAAtB;AACA,IAAIC,aAAa,GAAGF,KAAK,CAACE,aAA1B;AACA,IAAIC,OAAO,GAAGH,KAAK,CAACI,aAAN,EAAd,C,CAEA;;AACA,OAAO,SAASC,QAAT,CAAkBC,CAAlB,EAAqB;EAC1B,OAAOA,CAAP;AACD,C,CAED;;AACA,OAAO,SAASC,gBAAT,CAA0BN,SAA1B,EAAqC;EAC1C,OAAOA,SAAS,IAAI,IAAb,GACA,QADA,GAECA,SAAS,CAACO,WAAV,IAAyBP,SAAS,CAACQ,IAAnC,IAA2C,aAFnD;AAGD;AAED,OAAO,SAASC,2BAAT,CAAqCC,IAArC,EAA2C;EAEhD,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;IAC5BZ,SAAS,CAACa,IAAV,CAAgB,IAAhB,EAAsBD,KAAtB;IACAA,KAAK,CAACE,OAAN,CAAeJ,IAAf;EACD;;EAEDC,aAAa,CAACI,SAAd,GAA0BC,MAAM,CAACC,MAAP,CAAejB,SAAS,CAACe,SAAzB,CAA1B;;EAEAJ,aAAa,CAACI,SAAd,CAAwBG,oBAAxB,GAA+C,YAAW;IACxD,KAAKN,KAAL,CAAWO,SAAX,CAAsBT,IAAtB;EACD,CAFD;;EAIA,OAAOC,aAAP;AAED,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,OAAT,CAAiBJ,IAAjB,EAAuB;EAE5B,IAAIC,aAAa,GAAID,IAAI,IAAI,IAAT,GACCV,SADD,GAECS,2BAA2B,CAAEC,IAAF,CAFhD;EAIA,OAAO,UAASU,aAAT,EAAwB;IAE7B,IAAIZ,IAAI,GAAGF,gBAAgB,CAAEc,aAAF,CAA3B;;IAEA,SAASC,gBAAT,CAA0BT,KAA1B,EAAiC;MAC/BD,aAAa,CAACE,IAAd,CAAoB,IAApB,EAA0BD,KAA1B;IACD;;IAEDS,gBAAgB,CAACN,SAAjB,GAA6BC,MAAM,CAACC,MAAP,CAAeN,aAAa,CAACI,SAA7B,CAA7B;;IAEAM,gBAAgB,CAACN,SAAjB,CAA2BO,MAA3B,GAAoC,YAAW;MAC7C,OAAOF,aAAa,IAAInB,aAAa,CAAEmB,aAAF,EAAiB,KAAKR,KAAtB,CAArC;IACD,CAFD;;IAIAS,gBAAgB,CAACd,WAAjB,GAA+B,sBAAsBC,IAAtB,GAA6B,GAA5D;;IAEA,SAASe,UAAT,CAAoBC,EAApB,EAAwB;MACtB,OAAOvB,aAAa,CAAEC,OAAO,CAACuB,QAAV,EAAoB,EAApB,EAAwB,UAASC,EAAT,EAAa;QACvD,OAAOzB,aAAa,CAAEoB,gBAAF,EAAoBL,MAAM,CAACW,MAAP,CAAe,EAAf,EAAmBH,EAAnB,EAAuBE,EAAvB,CAApB,CAApB;MACD,CAFmB,CAApB;IAGD;;IAEDH,UAAU,CAAChB,WAAX,GAAyB,gBAAgBC,IAAhB,GAAuB,GAAhD;IAEA,OAAOe,UAAP;EAED,CA1BD;AA2BD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASK,SAAT,CAAmBhB,KAAnB,EAA0B;EAC/B,IAAI,OAAOA,KAAK,CAACiB,QAAb,KAA0B,UAA9B,EAA0C;IACxC,MAAM,IAAIC,SAAJ,CAAe,mDAAf,CAAN;EACD;;EACD9B,SAAS,CAACa,IAAV,CAAgB,IAAhB,EAAsBD,KAAtB;EACA,KAAKmB,SAAL,GAAiB,IAAIC,GAAJ,EAAjB;EACA,KAAKC,WAAL,GAAmB,IAAID,GAAJ,EAAnB;EACA,KAAKE,UAAL,GAAkB,IAAIF,GAAJ,EAAlB;AACD;AAEDJ,SAAS,CAACb,SAAV,GAAsBC,MAAM,CAACC,MAAP,CAAejB,SAAS,CAACe,SAAzB,CAAtB;;AAEAa,SAAS,CAACb,SAAV,CAAoBoB,gBAApB,GAAuC,YAAW;EAChD,IAAIJ,SAAS,GAAGK,KAAK,CAACC,IAAN,CAAY,KAAKN,SAAjB,EAA4BO,MAA5B,CAAoC,UAAS5B,IAAT,EAAe;IACjE,OAAO,EAAE,KAAKuB,WAAL,CAAiBM,GAAjB,CAAsB7B,IAAtB,KAA+B,KAAKwB,UAAL,CAAgBK,GAAhB,CAAqB7B,IAArB,CAAjC,CAAP;EACD,CAFe,EAEb,IAFa,CAAhB;EAGA,IAAIuB,WAAW,GAAGG,KAAK,CAACC,IAAN,CAAY,KAAKJ,WAAjB,EAA8BK,MAA9B,CAAsC,UAAS5B,IAAT,EAAe;IACrE,OAAO,CAAC,KAAKqB,SAAL,CAAeQ,GAAf,CAAoB7B,IAApB,CAAD,IAA8B,KAAKwB,UAAL,CAAgBK,GAAhB,CAAqB7B,IAArB,CAArC;EACD,CAFiB,EAEf,IAFe,CAAlB;EAGA,KAAKqB,SAAL,GAAiB,IAAIC,GAAJ,EAAjB;EACA,KAAKC,WAAL,GAAmB,IAAID,GAAJ,EAAnB;;EACA,IAAID,SAAS,CAACS,MAAV,KAAqB,CAArB,IAA0BP,WAAW,CAACO,MAAZ,KAAuB,CAArD,EAAwD;IACtD;EACD;;EACDP,WAAW,CAACQ,OAAZ,CAAqB,KAAKP,UAAL,CAAgBQ,MAArC,EAA6C,KAAKR,UAAlD;EACAH,SAAS,CAACU,OAAV,CAAmB,KAAKP,UAAL,CAAgBS,GAAnC,EAAwC,KAAKT,UAA7C;EACA,KAAKtB,KAAL,CAAWiB,QAAX,CAAqBO,KAAK,CAACC,IAAN,CAAY,KAAKH,UAAjB,CAArB;AACD,CAfD;;AAiBAN,SAAS,CAACb,SAAV,CAAoB6B,QAApB,GAA+B,YAAW;EACxCC,YAAY,CAAE,KAAKC,SAAP,CAAZ;EACA,KAAKA,SAAL,GAAiBC,UAAU,CAAE,UAASC,SAAT,EAAoB;IAC/CA,SAAS,CAACb,gBAAV;EACD,CAF0B,EAExB,EAFwB,EAEpB,IAFoB,CAA3B;AAGD,CALD;;AAOAP,SAAS,CAACb,SAAV,CAAoBD,OAApB,GAA8B,UAASJ,IAAT,EAAe;EAC3C,KAAKqB,SAAL,CAAeY,GAAf,CAAoBjC,IAApB;EACA,KAAKkC,QAAL;AACD,CAHD;;AAKAhB,SAAS,CAACb,SAAV,CAAoBI,SAApB,GAAgC,UAAST,IAAT,EAAe;EAC7C,KAAKuB,WAAL,CAAiBU,GAAjB,CAAsBjC,IAAtB;EACA,KAAKkC,QAAL;AACD,CAHD;;AAKAhB,SAAS,CAACb,SAAV,CAAoBG,oBAApB,GAA2C,YAAW;EACpD2B,YAAY,CAAE,KAAKC,SAAP,CAAZ;;EACA,IAAI,KAAKZ,UAAL,CAAgBe,IAAhB,GAAuB,CAA3B,EAA8B;IAC5B,KAAKrC,KAAL,CAAWiB,QAAX,CAAqB,EAArB;EACD;AACF,CALD;;AAOAD,SAAS,CAACb,SAAV,CAAoBO,MAApB,GAA6B,YAAW;EACtC,OAAOrB,aAAa,CAClBC,OAAO,CAACgD,QADU,EAElB;IAACC,KAAK,EAAE;MACNrC,OAAO,EAAE,KAAKA,OAAL,CAAasC,IAAb,CAAmB,IAAnB,CADH;MAENjC,SAAS,EAAE,KAAKA,SAAL,CAAeiC,IAAf,CAAqB,IAArB;IAFL;EAAR,CAFkB,EAMlB,KAAKxC,KAAL,CAAWyC,QANO,CAApB;AAQD,CATD"},"metadata":{},"sourceType":"module"}